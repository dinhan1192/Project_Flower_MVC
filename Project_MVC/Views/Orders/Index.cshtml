@model IEnumerable<Project_MVC.Models.Order>
@using Project_MVC.Models
@using Project_MVC.Utils

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var thisPage = ViewBag.Page as ThisPage;
    var url = "/Orders/Delete/";
    var compareDate = ViewBag.CompareDate as DateTimeModel;
    var startDate = "";
    var endDate = "";
    if (compareDate.startDate != null)
    {
        startDate = Utility.GetDateString(compareDate.startDate.Value, "MM/dd/yyyy");
    }
    if (compareDate.endDate != null)
    {
        endDate = Utility.GetDateString(compareDate.endDate.Value, "MM/dd/yyyy");
    }
}

<h2>Index</h2>
@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
@using (Html.BeginForm("Index", "Orders", FormMethod.Get))
{
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    <div class="col-md-5">
                        <p>Enter Ship Name - User Name - OrderId:</p>
                    </div>
                    <div class="col-md-6">
                        @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "form-control" })
                    </div>
                </div>
                <div class="clearfix"></div><br />
                <div class="form-group">
                    <div class="col-md-5">
                        <p>
                            Choose Status:
                        </p>
                    </div>
                    <div class="col-md-6">
                        @Html.DropDownList("Status", EnumHelper.GetSelectList(typeof(Order.OrderStatus)), "Select Status", new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <div class="col-md-5">
                        <p>Choose Payment Type:</p>
                    </div>
                    <div class="col-md-6">
                        @Html.DropDownList("PaymentType", EnumHelper.GetSelectList(typeof(Order.PaymentType)), "Select Payment Type", new { @class = "form-control" })
                    </div>
                </div>
                <div class="clearfix"></div><br />
                <div class="form-group">
                    <div class="col-md-5">
                        <p>Choose Date Range:</p>
                    </div>
                    <div class="col-md-6">
                        <input type="text" name="dateRange" value="@ViewBag.startDate - @ViewBag.endDate" />
                        @Html.Hidden("start", startDate)
                        @Html.Hidden("end", endDate)
                        <input type="submit" value="Search" style="margin-left:15px;" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />

}

@using (Html.BeginForm("ExportToExcel", "Orders", FormMethod.Post))
{
    <table class="table table-bordered table-hover" style="text-align:center;">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Id)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PaymentTypeId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ShipName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ShipAddress)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ShipPhone)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TotalPrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedAt)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedAt)
                </th>
                <th>
                    @Html.ActionLink("CreatedBy", "Index", new { sortOrder = ViewBag.NameSortParm })
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th></th>
            </tr>
        </thead>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentTypeId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ShipName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ShipAddress)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ShipPhone)
                </td>
                <td style="text-align:right;">
                    @item.TotalPrice.ToString("C", FlowerUtility.UnitedStates)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedAt)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UpdatedAt)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UpdatedBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id })

                    @if (item.Status == Order.OrderStatus.Cancel)
                    {
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id },
                 new { @class = "btn btn-danger btn-delete-notify", @id = "delete-" + item.Id, data_request_url = @url })
                    }
                </td>
            </tr>
        }
    </table>
    @Html.Partial("_Paginate", thisPage)
    @Html.AntiForgeryToken()
    <input type="submit" value="Export to Excel" class="btn btn-primary" />
}

@section scripts{
    @Scripts.Render("~/bundles/custom");
    <script>
        var start = moment().subtract(29, 'days');
        var end = moment();
        var newStart = $("#start").val();
        var newEnd = $("#end").val();
        if (newStart != null && newStart != "") {
            newStart = newStart.split("/");
            start = new Date(newStart[2], newStart[1] - 1, newStart[0]);
        }

        if (newEnd != null && newEnd != "") {
            newEnd = newEnd.split("/");
            end = new Date(newEnd[2], newEnd[1] - 1, newEnd[0]);
        }

        //function cb(newStartDate, newEndDate) {
        //    $('input[name="dateRange"]').html(newStartDate.format('MMMM D, YYYY') + ' - ' + newEndDate.format('MMMM D, YYYY'));
        //    //console.log(newStartDate.format('MMMM D, YYYY') + ' - ' + newEndDate.format('MMMM D, YYYY'));
        //}

        $('input[name="dateRange"]').daterangepicker({
            startDate: start,
            endDate: end,
            ranges:
            {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        });

        $('input[name="dateRange"]').on('apply.daterangepicker', function (ev, picker) {
            $("#start").val(picker.startDate.format("D/MM/YYYY"));
            $("#end").val(picker.endDate.format("D/MM/YYYY"));
            //window.location.href = `/Orders/Index?start=${picker.startDate.format("D/MM/YYYY")}&end=${picker.endDate.format("D/MM/YYYY")}`;
            //console.log(newStartDate.format('MMMM D, YYYY') + ' - ' + newEndDate.format('MMMM D, YYYY'));
            //console.log("123");
            //this.outerHTML = newStartDate.format("D/MM/YYYY") + ' - ' + newEndDate.format("D/MM/YYYY");
        });
    </script>
}
